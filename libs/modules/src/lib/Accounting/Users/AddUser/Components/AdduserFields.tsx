import React, { useEffect, useState } from 'react';
import {
  Box,
  Grid,
  Typography,
  TextField,
  Select,
  MenuItem,
  FormControlLabel,
  Checkbox,
  InputAdornment,
  IconButton,
  Button,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import { Formik, Field, Form } from 'formik';
import { AddUser } from '../../../../../../interfaces/AddUser/AddUser';
import IntlMessages from '@crema/helpers/IntlMessages';
import { textFieldStyles } from 'libs/modules/src/lib/Accounting/Global/Styling';
import { Visibility, VisibilityOff } from '@mui/icons-material';
import { CustomDivider } from 'libs/modules/src/lib/Accounting/Global/Styling';
import styled from 'styled-components';
import { Role } from '../../../../../../interfaces/Role/Role';
import { getAllRoles, addUser } from 'libs/services/RolesService/RolesService';
const Container = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
`;
enum User_Type {
  Owners = 1,
  Employee = 2,
  Customer = 3,
  Vendor = 4,
  Guest = 5,
}
const UserFields = () => {
  const initialValues = {
    fullName: '',
    username: '',
    email: '',
    autoCreatePassword: false,
    password: '',
    roleId: 0,
    userTypeId: 0,
  };
  const userTypes = [
    { label: 'Employee', value: 1 },
    { label: 'Customer', value: 2 },
    { label: 'Vendor', value: 3 },
    { label: 'Guest', value: 4 },
    { label: 'Owner', value: 5 },
  ];
  const navigate = useNavigate();
  const handleSubmit = async (values: AddUser) => {
    console.log('Form Values:', values);
    try {
      const response = await addUser(values);
      console.log('User added successfully:', response);
      navigate('/users/user');
    } catch (error) {
      console.error('Error adding user:', error);
    }
  };
  const [showPassword, setShowPassword] = useState(false);
  const [businessData, setBusinessData] = useState<Role[]>([]);
  const [autoGeneratedPassword, setAutoGeneratedPassword] = useState('');
  const generateRandomPassword = () => {
    const charset =
      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
    const passwordLength = 12;
    let password = '';
    for (let i = 0; i < passwordLength; i++) {
      const randomIndex = Math.floor(Math.random() * charset.length);
      password += charset[randomIndex];
    }
    return password;
  };
  const handleAutoCreatePassword = (
    setFieldValue: (field: string, value: any) => void,
    isChecked: boolean
  ) => {
    if (isChecked) {
      const newPassword = generateRandomPassword();
      setFieldValue('password', newPassword);
      setAutoGeneratedPassword(newPassword);
    } else {
      setFieldValue('password', '');
      setAutoGeneratedPassword('');
    }
  };
  useEffect(() => {
    const fetchRoles = async () => {
      try {
        const data = await getAllRoles();
        setBusinessData(data);
      } catch (error) {
        console.error('Error fetching roles:', error);
      }
    };
    fetchRoles();
  }, []);
  const textFieldStyle = textFieldStyles();
  const [selectedRoleId, setSelectedRoleId] = useState('');

  const handleRoleChange = (event: {
    target: { value: React.SetStateAction<string> };
  }) => {
    setSelectedRoleId(event.target.value);
  };

  // const handleSubmit = () => {
  //   // Access the selected role ID from selectedRoleId and submit it along with other form values
  //   console.log('Selected Role ID:', selectedRoleId);
  //   console.log('Other Form Values:', values);
  //   // Your form submission logic here
  // };
  const roleOption = Object.entries(User_Type).map(([key, value]) => ({
    value,
  }));

  return (
    <Formik initialValues={initialValues} onSubmit={handleSubmit}>
      {({ values, setFieldValue }) => (
        <Form>
          <Box
            marginLeft={{ xs: '5%', sm: '0%' }}
            marginRight={{ xs: '5%', sm: '0%' }}
            marginTop="1%"
            marginBottom="1%"
          >
            <div style={{ fontSize: '14px', fontWeight: 900 }}>
              Set up the basics
            </div>
          </Box>
          <Box display="flex" justifyContent="center">
            <Box width={{ xs: '75%', sm: '50%' }} marginTop="2%">
              <Grid container spacing={2} sx={{ mb: 4 }} alignItems={'center'}>
                <Grid item xs={12} sm={4} md={2} textAlign={'right'}>
                  <Typography variant="subtitle1">
                    <IntlMessages id="common.name" />
                  </Typography>
                </Grid>
                <Grid item xs={10}>
                  <Field
                    as={TextField}
                    type="text"
                    id="fullName"
                    name="fullName"
                    placeholder="Enter your Full name"
                    fullWidth
                    InputProps={{
                      classes: {
                        root: textFieldStyle.customTextField,
                      },
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={4} md={2} textAlign={'right'}>
                  <Typography variant="subtitle1"></Typography>
                </Grid>
                <Grid item xs={10}>
                  <Field
                    as={TextField}
                    type="text"
                    id="username"
                    name="username"
                    fullWidth
                    placeholder="Username"
                    InputProps={{
                      classes: {
                        root: textFieldStyle.customTextField,
                      },
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={4} md={2} textAlign={'right'}>
                  <Typography variant="subtitle1"></Typography>
                </Grid>
                <Grid item xs={10}>
                  <FormControlLabel
                    control={
                      <Field
                        as={Checkbox}
                        id="autoCreatePassword"
                        name="autoCreatePassword"
                        type="checkbox"
                        onClick={(e: React.ChangeEvent<HTMLInputElement>) =>
                          handleAutoCreatePassword(
                            setFieldValue,
                            e.target.checked
                          )
                        }
                      />
                    }
                    label="Automatically create a password"
                  />
                </Grid>
                <Grid item xs={12} sm={4} md={2} textAlign={'right'}>
                  <Typography variant="subtitle1">
                    <IntlMessages id="common.password" />
                  </Typography>
                </Grid>
                <Grid item xs={4}>
                  <Field
                    as={TextField}
                    type={showPassword ? 'text' : 'password'}
                    id="password"
                    name="password"
                    value={
                      values.autoCreatePassword
                        ? autoGeneratedPassword
                        : values.password
                    }
                    fullWidth
                    InputProps={{
                      classes: {
                        root: textFieldStyle.customTextField,
                      },
                      endAdornment: (
                        <InputAdornment position="end">
                          <IconButton
                            onClick={() => setShowPassword(!showPassword)}
                            edge="end"
                          >
                            {showPassword ? <VisibilityOff /> : <Visibility />}
                          </IconButton>
                        </InputAdornment>
                      ),
                    }}
                  />
                </Grid>
                <Grid item xs={6}></Grid>
                <Grid item xs={12} sm={4} md={2} textAlign={'right'}>
                  <Typography variant="subtitle1"></Typography>
                </Grid>
                <Grid item xs={10}>
                  <FormControlLabel
                    control={
                      <Field
                        as={Checkbox}
                        id="requireChangePassword"
                        name="requireChangePassword"
                        type="checkbox"
                      />
                    }
                    label="Require to user to change their password when they first sign in"
                  />
                </Grid>
                <Grid item xs={12} sm={4} md={2} textAlign={'right'}>
                  <Typography variant="subtitle1"></Typography>
                </Grid>
                <Grid item xs={10}>
                  <FormControlLabel
                    control={
                      <Field
                        as={Checkbox}
                        id="sendPasswordEmail"
                        name="sendPasswordEmail"
                        type="checkbox"
                      />
                    }
                    label="Send password in email upon completion"
                  />
                </Grid>
                <Grid item xs={12} sm={4} md={2} textAlign={'right'}>
                  <Typography variant="subtitle1">
                    <IntlMessages id="common.email" />
                  </Typography>
                </Grid>
                <Grid item xs={4}>
                  <Field
                    as={TextField}
                    type="email"
                    id="email"
                    name="email"
                    fullWidth
                    InputProps={{
                      classes: {
                        root: textFieldStyle.customTextField,
                      },
                    }}
                  />
                </Grid>
                <Grid item xs={6}></Grid>
                <Grid item xs={12} sm={4} md={2} textAlign={'right'}>
                  <Typography variant="subtitle1">Role</Typography>
                </Grid>
                <Grid item xs={4}>
                  <Field
                    as={Select}
                    type="number"
                    id="roleId"
                    name="roleId"
                    fullWidth
                  >
                    {businessData.map((option) => (
                      <MenuItem key={option.name} value={option.id}>
                        {option.name}
                      </MenuItem>
                    ))}
                  </Field>
                </Grid>
                <Grid item xs={6}></Grid>
                <Grid item xs={12} sm={4} md={2} textAlign={'right'}>
                  <Typography variant="subtitle1">User Type</Typography>
                </Grid>
                <Grid item xs={4}>
                  <Field
                    as={Select}
                    type="number"
                    id="userTypeId"
                    name="userTypeId"
                    fullWidth
                  >
                    {userTypes.map((option) => (
                      <MenuItem key={option.label} value={option.value}>
                        {option.label}
                      </MenuItem>
                    ))}
                  </Field>
                </Grid>
              </Grid>
            </Box>
          </Box>
          <CustomDivider />
          <Container
            style={{
              justifyContent: 'center',
              paddingTop: '10px',
              paddingBottom: '8px',
            }}
          >
            <Button
              type="submit"
              variant="contained"
              size="medium"
              sx={{
                backgroundColor: '#57b8c9',
                '&:hover': {
                  backgroundColor: '#57b8c9',
                },
              }}
            >
              Submit
            </Button>
          </Container>
        </Form>
      )}
    </Formik>
  );
};
export default UserFields;
